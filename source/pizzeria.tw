:: Pizzeria main
Let the work day begin!
[[Assign order|Select rider]]
[[Wait for event|Pizzeria event]]
[[Show orders]]
<<if $money < 50>>
  Shut it all down. [[It's not worth it|Game over]]
<<else>>
  [[Pack it up for the day|Home room][$money-=50]]
<</if>>

:: Pizzeria event
<<set _mins_till_next_order = random(1, 30)>> \
<<set $next_order_mins = $time_mins + _mins_till_next_order>> \

<<if $time_mins/60 >= 16>>
  <<silently>>
    <<set $orders=[]>> 
    <<set $orderByRiderName={}>>
  <</silently>>
  <<if $money < 50 >>> \
    You did not earn enough money to keep the pizzeria open.
    Game over.
  <<else>>
    Work day is over. [[Time to go home|Home room][$money-=50]]
  <</if>>
<<elseif $orders.length == 0 or $orders[0]["time"] >= $next_order_mins>> \
  <<set $time_mins = $next_order_mins>> \
  <<set _start_min = $next_order_mins + 30>> \
  <<set _distance = either([2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 9])>> \
  <<set _pizza_count = either([1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 8])>> \
  <<set $candidate_order = {"distance": _distance, "pizzas": _pizza_count, "time": _start_min, "status": "waiting", "rider": null}>> \
   
  There is a new order for _pizza_count <<if _pizza_count == 1>>pizza<<else>>pizzas<</if>> at distance _distance; order will be ready for rider pick up at <<print setup.minsToClock(_start_min)>>
  [[Accept order]]
  [[Refuse order|Pizzeria main]]
<<else>>
  <<silently>> \
    /* remove it for now, this needs to be decided based on status */
    <<set _order = $orders[0]>>
    <<set $time_mins = _order["time"]>>
  <</silently>> \
  <<if _order["status"] == "waiting">> \
    <<run _order["status"] = "stale">> \
    <<run _order["time"] += 10>> \
    <<run $orders.sort((a, b) => {return a["time"] - b["time"]})>> \
    Order for <<print _order["pizzas"]>> at distance <<print _order["distance"]>> turned stale; assign it in 10 minutes or less or else it fails
  <<elseif _order["status"] == "idle">> \
    <<run _order["status"] = "ongoing">> \
    <<run _order["time"] = _order["time"] + Math.ceil(2 * (_order["distance"] + _order["rider"]["speed"]))>> \
    <<run $orders.sort((a, b) => {return a["time"] - b["time"]})>> \
    Order for <<print _order["pizzas"]>> at distance <<print _order["distance"]>> delivery in progress
  <<elseif _order["status"] == "ongoing">> \
    <<run _order["status"] = "completed">> \
    <<run _rider = _order["rider"]>> \
    <<run $orderByRiderName[_rider["name"]] = null>> \
    <<run $money += _order["pizzas"] * 5>> \
    <<run $orders.shift()>> \
    Order for <<print _order["pizzas"]>> at distance <<print _order["distance"]>> completed
  <<elseif _order["status"] == "stale">> \
    <<run _order["status"] = "failed">> \
    <<run $orders.shift()>> \
    Order for <<print _order["pizzas"]>> at distance <<print _order["distance"]>> failed
  <</if>>

  <<return>>
<</if>>


:: Accept order
<<silently>>
  <<run $orders.push($candidate_order)>>
  <<run $orders.sort((a, b) => {return a["time"] - b["time"]})>>
<</silently>>
Order has been inserted in queue.
[[Back|Pizzeria main]]


:: Show orders
<<for _i, _order range $orders>> \
  <<silently>> \
    <<set _disp_time = setup.minsToClock(_order["time"])>>
  <</silently>> \
  <<capture _order, _disp_time>> \
    Order for <<print _order["pizzas"]>> at distace <<print _order["distance"]>>
    ..status <<print _order["status"]>>
    <<if _order["status"] == "waiting">> \
      ..pizza ready at _disp_time
    <<elseif _order["status"] == "idle">> \
      ..pizza ready at _disp_time
    <<elseif _order["status"] == "ongoing">> \
      ..rider back at _disp_time
    <<elseif _order["status"] == "completed">> \
      ..delivery completed at _disp_time
    <<elseif _order["status"] == "stale">> \
      ..assign no later than _disp_time
    <<else>> \
      ..delivery failed at _disp_time
    <</if>> \
    <<if _order["rider"] === null>>..no rider assigned<<else>>..rider <<print _order["rider"]["name"]>><</if>>
  <</capture>> \
<</for>>

<<return>>


:: Select rider
<<for _i, _rider range $riders>> \
  <<set _riderName = _rider["name"]>> \
  <<set _order = $orderByRiderName[_rider["name"]]>> \
  <<set _message = "Assign rider " + _riderName>> \
  <<capture _i, _message>> \
    <<if _order == null or _order["status"] != "idle">> \
      [[_message|Select order][$selectedRiderIndex=_i]]
    <</if>> \
  <</capture>> \
<</for>>\

[[Back|Pizzeria main]]


:: Select order
<<set _selectedRider = $riders[$selectedRiderIndex]>> \
<<print "Assign rider " + _selectedRider["name"]>>
<<for _i, _order range $orders>> \
  <<silently>> \
    <<if _selectedRider["capacity"] < _order["pizzas"]>> \
      <<continue>> \
    <</if>> \
    <<set _disp_time = setup.minsToClock(_order["time"])>> \
  <</silently>> \
  <<capture _i, _order, _disp_time>> \
    <<if $orders[_i]["status"] == "waiting">> \
      [[Select|Assignment succeeded][$selectedOrderIndex=_i]] Order for <<print $orders[_i]["pizzas"]>> pizza(s) waiting till _disp_time
    <<elseif $orders[_i]["status"] == "idle">> \
      [[Select|Assignment succeeded][$selectedOrderIndex=_i]] Order for <<print $orders[_i]["pizzas"]>> pizza(s) idle till _disp_time assigned to <<print $orders[_i]["rider"]["name"]>>
    <</if>> \
  <</capture>> \
<</for>>

[[Back to riders|Select rider]]


:: Assignment succeeded
<<set _selectedOrder = $orders[$selectedOrderIndex]>> \
<<set _selectedRider = $riders[$selectedRiderIndex]>> \
<<silently>>
  <<if _selectedOrder["rider"] !== undefined and _selectedOrder["rider"] !== null>>
    <<set $orderByRiderName[_selectedOrder["rider"]["name"]] = null>>
  <</if>>

  <<set _oldOrder = $orderByRiderName[_selectedRider["name"]]>>
  <<if _oldOrder !== undefined and _oldOrder !== null>>
    <<set _oldOrder["status"] = "waiting">>
    <<set _oldOrder["rider"] = null>>
  <</if>>

  <<set _selectedOrder["rider"] = _selectedRider>>
  <<set _selectedOrder["status"] = "idle">>
  <<set $orderByRiderName[_selectedRider["name"]] = _selectedOrder>>
<</silently>>
Order has been assigned to <<print _selectedRider["name"]>>
[[Back to main view|Pizzeria main]]
